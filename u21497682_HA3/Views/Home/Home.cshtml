@model u21497682_HA3.Models.Combined

<main>
    <div class="row mainSection">
        <div class="row componentHeadings">
            <div class="col">
                <h3>Students</h3>
            </div>
            <div class="col" style="text-align:right;">
                @Html.ActionLink("Create New Student", "Create", "students", null, new { @class = "btn btn-success openModal" })
            </div>
        </div>

        <div class="row componentList">
            <table>
                <thead>
                    <tr>
                        <th>Student ID</th>
                        <th>Name</th>
                        <th>Surname</th>
                        <th>Birth Date</th>
                        <th>Gender</th>
                        <th>Class</th>
                        <th>Point</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var student in Model.Students)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => student.studentId)</td>
                            <td>@Html.DisplayFor(modelItem => student.name)</td>
                            <td>@Html.DisplayFor(modelItem => student.surname)</td>
                            <td>@Html.DisplayFor(modelItem => student.birthdate)</td>
                            <td>@Html.DisplayFor(modelItem => student.gender)</td>
                            <td>@Html.DisplayFor(modelItem => student.@class)</td>
                            <td>@Html.DisplayFor(modelItem => student.point)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="row componentPaging">
            <div class="pagination">
                @if (ViewBag.StudentCurrentPage > 1)
                {
                    <a href="@Url.Action("Home", new { studentPage = 1, studentPageSize = ViewBag.StudentPageSize, bookPage = ViewBag.BookCurrentPage, bookPageSize = ViewBag.BookPageSize })">First</a>
                    <a href="@Url.Action("Home", new { studentPage = ViewBag.StudentCurrentPage - 1, studentPageSize = ViewBag.StudentPageSize, bookPage = ViewBag.BookCurrentPage, bookPageSize = ViewBag.BookPageSize })">Previous</a>
                }

                @* Define the range of pages to display *@
                @{
                    int StudentMaxVisiblePages = 5; // Number of page links to show at once
                    int StudentStartPage = Math.Max(1, ViewBag.StudentCurrentPage - StudentMaxVisiblePages / 2);
                    int StudentEndPage = Math.Min(ViewBag.StudentTotalPages, StudentStartPage + StudentMaxVisiblePages - 1);

                    // Adjust if we're near the end
                    if ((StudentEndPage - StudentStartPage) < (StudentMaxVisiblePages - 1))
                    {
                        StudentStartPage = Math.Max(1, StudentEndPage - StudentMaxVisiblePages + 1);
                    }
                }

                @* Display the page links within the range *@
                @for (int i = StudentStartPage; i <= StudentEndPage; i++)
                {
                    <a href="@Url.Action("Home", new { studentPage = i, studentPageSize = ViewBag.StudentPageSize, bookPage = ViewBag.BookCurrentPage, bookPageSize = ViewBag.BookPageSize })"
                       class="pagination-link @(i == ViewBag.StudentCurrentPage ? "active" : "")">@i</a>
                }

                @if (ViewBag.StudentCurrentPage < ViewBag.StudentTotalPages)
                {
                    <a href="@Url.Action("Home", new { studentPage = ViewBag.StudentCurrentPage + 1, studentPageSize = ViewBag.StudentPageSize, bookPage = ViewBag.BookCurrentPage, bookPageSize = ViewBag.BookPageSize })">Next</a>
                    <a href="@Url.Action("Home", new { studentPage = ViewBag.StudentTotalPages, studentPageSize = ViewBag.StudentPageSize, bookPage = ViewBag.BookCurrentPage, bookPageSize = ViewBag.BookPageSize })">Last</a>
                }
            </div>
        </div>

        <div class="row">
            <p style="color: white";>.</p>
            <hr />
            <p style="color: white" ;>.</p>
        </div>

        <div class="row componentHeadings">
            <div class="col">
                <h3>Books</h3>
            </div>
            <div class="col" style="text-align:right;">
                @Html.ActionLink("Create New Book", "Create", "books", null, new { @class = "btn btn-success openModal" })
            </div>
        </div>

        <div class="row componentList">
            <table>
                <thead>
                    <tr>
                        <th>Book ID</th>
                        <th>Name</th>
                        <th>Pages</th>
                        <th>Point</th>
                        <th>Author</th>
                        <th>Type</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var book in Model.Books)
                    {
                        <tr>
                            <td>@Html.DisplayFor(modelItem => book.bookId)</td>
                            <td>@Html.DisplayFor(modelItem => book.name)</td>
                            <td>@Html.DisplayFor(modelItem => book.pagecount)</td>
                            <td>@Html.DisplayFor(modelItem => book.point)</td>
                            <td>@Html.DisplayFor(modelItem => book.authors.name) @Html.DisplayFor(modelItem => book.authors.surname)</td>
                            <td>@Html.DisplayFor(modelItem => book.types.name)</td>
                            <td>@Html.DisplayFor(modelItem => book.Status)</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="row componentPaging">
            <div class="pagination">
                @if (ViewBag.BookCurrentPage > 1)
                {
                    <a href="@Url.Action("Home", new { studentPage = ViewBag.StudentCurrentPage, studentPageSize = ViewBag.StudentPageSize, bookPage = 1, bookPageSize = ViewBag.BookPageSize })">First</a>
                    <a href="@Url.Action("Home", new { studentPage = ViewBag.StudentCurrentPage, studentPageSize = ViewBag.StudentPageSize, bookPage = ViewBag.BookCurrentPage - 1, bookPageSize = ViewBag.BookPageSize })">Previous</a>
                }

                @* Define the range of pages to display *@
                @{
                    int BookMaxVisiblePages = 5; // Number of page links to show at once
                    int BookStartPage = Math.Max(1, ViewBag.BookCurrentPage - BookMaxVisiblePages / 2);
                    int BookEndPage = Math.Min(ViewBag.BookTotalPages, BookStartPage + BookMaxVisiblePages - 1);

                    // Adjust if we're near the end
                    if ((BookEndPage - BookStartPage) < (BookMaxVisiblePages - 1))
                    {
                        BookStartPage = Math.Max(1, BookEndPage - BookMaxVisiblePages + 1);
                    }
                }

                @* Display the page links within the range *@
                @for (int i = BookStartPage; i <= BookEndPage; i++)
                {
                    <a href="@Url.Action("Home", new { studentPage = ViewBag.StudentCurrentPage, studentPageSize = ViewBag.StudentPageSize, bookPage = i, bookPageSize = ViewBag.BookPageSize })"
                       class="pagination-link @(i == ViewBag.BookCurrentPage ? "active" : "")">@i</a>
                }

                @if (ViewBag.BookCurrentPage < ViewBag.BookTotalPages)
                {
                    <a href="@Url.Action("Home", new { studentPage = ViewBag.StudentCurrentPage, studentPageSize = ViewBag.StudentPageSize, bookPage = ViewBag.BookCurrentPage + 1, bookPageSize = ViewBag.BookPageSize })">Next</a>
                    <a href="@Url.Action("Home", new { studentPage = ViewBag.StudentCurrentPage, studentPageSize = ViewBag.StudentPageSize, bookPage = ViewBag.BookTotalPages, bookPageSize = ViewBag.BookPageSize })">Last</a>
                }
            </div>
        </div>

    </div>
</main>

<style>
    .componentSection
    {
        padding: 40px;
    }

    .componentHeadings
    {

    }

    .componentList
    {

    }

    .componentPaging
    {
        
    }

    th, td {
        padding-left: 15px;
        padding-right: 15px;
        text-align: left;
        border-bottom: 1px solid #dee2e6;
    }

    th 
    {
        background-color: #007bff;
        color: white;
        font-weight: bold;
        text-transform: uppercase;
    }

    tr:hover 
    {
        background-color: #f1f3f5;
    }

    .pagination 
    {
        display: flex;
        gap: 5px;
        justify-content: center;
        margin-top: 15px;
    }

    .pagination a 
    {
        padding: 8px 12px;
        text-decoration: none;
        color: #333;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .pagination a.active 
    {
        background-color: #007bff;
        color: white;
    }

    .pagination a:hover:not(.active) 
    {
        background-color: #ddd;
    }
</style>

@*Bootstrap Modal*@
<div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="myModalLabel">Modal Title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    $(document).on('click', '.openModal', function (e) {
        e.preventDefault();
        var url = $(this).attr('href');

        // Set modal title based on the link text
        var linkText = $(this).text().trim();
        $('#myModalLabel').text(linkText + ' - Loading...');
        $('#myModal .modal-body').load(url, function () {
            $('#myModalLabel').text(linkText);
            $('#myModal').modal('show');
        });
    });</script>